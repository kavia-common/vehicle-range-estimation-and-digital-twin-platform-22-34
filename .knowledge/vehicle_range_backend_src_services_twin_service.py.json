{"is_source_file": true, "format": "Python", "description": "This file defines the TwinService class, which provides file-based persistence for digital twin objects. It includes methods for creating, retrieving, updating, listing, and deleting digital twin records stored as JSON files in a specific directory.", "external_files": ["src.core.config", "src.domain.schemas"], "external_methods": ["get_settings", "ensure_data_dirs", "DigitalTwinCreate", "DigitalTwin", "DigitalTwinUpdate", "TwinListResponse"], "published": ["TwinService"], "classes": [{"name": "TwinService", "description": "Service class managing digital twin data stored as JSON files, providing CRUD operations and listing capabilities."}], "methods": [{"name": "None __init__(self)", "description": "Initializes the TwinService by ensuring data directories exist and setting the base and twin directory paths.", "scope": "TwinService", "scopeKind": "class"}, {"name": "str _path(self, twin_id: str)", "description": "Constructs a safe file path for a twin ID.", "scope": "TwinService", "scopeKind": "class"}, {"name": "Optional[Dict[str,Any]] _load(self, path: str)", "description": "Loads JSON data from a specified file path.", "scope": "TwinService", "scopeKind": "class"}, {"name": "None _save(self, path: str, data: Dict[str, Any])", "description": "Saves data as JSON to the specified file path.", "scope": "TwinService", "scopeKind": "class"}, {"name": "DigitalTwin create(self, payload: DigitalTwinCreate)", "description": "Creates a new digital twin record and persists it as a JSON file.", "scope": "TwinService", "scopeKind": "class"}, {"name": "Optional[DigitalTwin] get(self, twin_id: str)", "description": "Retrieves a digital twin by ID.", "scope": "TwinService", "scopeKind": "class"}, {"name": "TwinListResponse list(self, offset: int = 0, limit: int = 50)", "description": "Lists all digital twins with pagination support.", "scope": "TwinService", "scopeKind": "class"}, {"name": "Optional[DigitalTwin] update(self, twin_id: str, update: DigitalTwinUpdate)", "description": "Updates fields of an existing digital twin.", "scope": "TwinService", "scopeKind": "class"}, {"name": "bool delete(self, twin_id: str)", "description": "Deletes a digital twin by ID.", "scope": "TwinService", "scopeKind": "class"}], "calls": ["os.path.abspath", "get_settings", "ensure_data_dirs", "os.path.join", "os.path.exists", "json.load", "json.dump", "uuid.uuid4", "datetime.utcnow", "DigitalTwinCreate.model_dump", "DigitalTwin", "DigitalTwinUpdate", "os.listdir", "os.remove"], "search-terms": ["twin_service", "digital twin JSON persistence", "file-based twin management", "create/delete/update twin files", "twin ID handling", "pagination of twin list"], "state": 2, "file_id": 20, "knowledge_revision": 42, "git_revision": "", "ctags": [{"_type": "tag", "name": "TwinService", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^class TwinService:$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "__init__", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def __init__(self) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "_load", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def _load(self, path: str) -> Optional[Dict[str, Any]]:$/", "language": "Python", "typeref": "typename:Optional[Dict[str,Any]]", "kind": "member", "signature": "(self, path: str)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "_path", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def _path(self, twin_id: str) -> str:$/", "language": "Python", "typeref": "typename:str", "kind": "member", "signature": "(self, twin_id: str)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "_save", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def _save(self, path: str, data: Dict[str, Any]) -> None:$/", "language": "Python", "typeref": "typename:None", "kind": "member", "signature": "(self, path: str, data: Dict[str, Any])", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "create", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def create(self, payload: DigitalTwinCreate) -> DigitalTwin:$/", "language": "Python", "typeref": "typename:DigitalTwin", "kind": "member", "signature": "(self, payload: DigitalTwinCreate)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "delete", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def delete(self, twin_id: str) -> bool:$/", "language": "Python", "typeref": "typename:bool", "kind": "member", "signature": "(self, twin_id: str)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "get", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def get(self, twin_id: str) -> Optional[DigitalTwin]:$/", "language": "Python", "typeref": "typename:Optional[DigitalTwin]", "kind": "member", "signature": "(self, twin_id: str)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "list", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def list(self, offset: int = 0, limit: int = 50) -> TwinListResponse:$/", "language": "Python", "typeref": "typename:TwinListResponse", "kind": "member", "signature": "(self, offset: int = 0, limit: int = 50)", "scope": "TwinService", "scopeKind": "class"}, {"_type": "tag", "name": "update", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/services/twin_service.py", "pattern": "/^    def update(self, twin_id: str, update: DigitalTwinUpdate) -> Optional[DigitalTwin]:$/", "language": "Python", "typeref": "typename:Optional[DigitalTwin]", "kind": "member", "signature": "(self, twin_id: str, update: DigitalTwinUpdate)", "scope": "TwinService", "scopeKind": "class"}], "hash": "e3a28b374265e6d7b54e186588d044dc", "format-version": 4, "code-base-name": "vehicle_range_backend", "filename": "vehicle_range_backend/src/services/twin_service.py", "revision_history": [{"42": ""}]}