{"is_source_file": true, "format": "Python", "description": "This file defines various data models and schemas for a vehicle range estimation platform, including vehicle specifications, telemetry data, geographic shapes, digital twin representations, analytics, and synthetic data generation.", "external_files": ["pydantic", "datetime"], "external_methods": ["pydantic.BaseModel", "pydantic.Field", "pydantic.field_validator", "pydantic.conlist", "pydantic.confloat", "typing.List", "typing.Optional", "typing.Literal"], "published": ["VehicleSpec", "Telemetry", "RangeEstimateRequest", "RangeEstimateResponse", "CircleRequest", "PolygonRequest", "PolygonResponse", "DigitalTwinBase", "DigitalTwinCreate", "DigitalTwinUpdate", "DigitalTwin", "TwinListResponse", "AnalyticsRequest", "AnalyticsResponse", "SyntheticDataRequest", "SyntheticDataPoint", "SyntheticDataResponse"], "classes": [{"name": "VehicleSpec", "description": "Defines specifications for a vehicle, including make, model, year, battery capacity, and reserve percentage."}, {"name": "Telemetry", "description": "Captures real-time telemetry data such as speed, temperature, wind, and state of charge."}, {"name": "RangeEstimateRequest", "description": "Encapsulates a request for range estimation, including vehicle specifications and telemetry data."}, {"name": "RangeEstimateResponse", "description": "Returns the estimated range in kilometers along with the assumptions used."}, {"name": "CircleRequest", "description": "Request for defining a circular geographic area with validation for latitude and longitude."}, {"name": "PolygonRequest", "description": "Request specifying polygon coordinates for geographic shapes."}, {"name": "PolygonResponse", "description": "Defines a polygon GeoJSON-like structure with type and coordinates."}, {"name": "DigitalTwinBase", "description": "Base class for digital twin entities, including name and vehicle info."}, {"name": "DigitalTwinCreate", "description": "Schema for creating a new digital twin; inherits from DigitalTwinBase."}, {"name": "DigitalTwinUpdate", "description": "Schema for updating digital twin data; optional fields."}, {"name": "DigitalTwin", "description": "Represents a complete digital twin entity with identifiers and timestamps."}, {"name": "TwinListResponse", "description": "Pagination response with list of digital twins and metadata."}, {"name": "AnalyticsRequest", "description": "Input data for analytics, specifically efficiency history."}, {"name": "AnalyticsResponse", "description": "Results of analytics including statistics and trend analysis."}, {"name": "SyntheticDataRequest", "description": "Parameters for generating synthetic driving scenario data."}, {"name": "SyntheticDataPoint", "description": "Individual data point in synthetic data sequence."}, {"name": "SyntheticDataResponse", "description": "Contains generated synthetic data points and export path."}], "methods": [{"name": "float _validate_lat(value: float)", "description": "Validates latitude is between -90 and 90 degrees.", "scope": "", "scopeKind": ""}, {"name": "float _validate_lon(value: float)", "description": "Validates longitude is between -180 and 180 degrees.", "scope": "", "scopeKind": ""}], "calls": ["field_validator('center_lat')(_validate_lat)", "field_validator('center_lon')(_validate_lon)"], "search-terms": ["VehicleSpec", "Telemtry", "RangeEstimate", "Shape geometries", "DigitalTwin", "Synthetic data", "GeoJSON", "analytics"], "state": 2, "file_id": 16, "knowledge_revision": 66, "git_revision": "8c7b547e770bd77c592331e81072a8b0af4fe765", "revision_history": [{"35": ""}, {"66": "8c7b547e770bd77c592331e81072a8b0af4fe765"}], "ctags": [{"_type": "tag", "name": "AnalyticsRequest", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class AnalyticsRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "AnalyticsResponse", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class AnalyticsResponse(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "CircleRequest", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class CircleRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DigitalTwin", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class DigitalTwin(DigitalTwinBase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DigitalTwinBase", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class DigitalTwinBase(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DigitalTwinCreate", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class DigitalTwinCreate(DigitalTwinBase):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "DigitalTwinUpdate", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class DigitalTwinUpdate(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "PolygonRequest", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class PolygonRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "PolygonResponse", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class PolygonResponse(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RangeEstimateRequest", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class RangeEstimateRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "RangeEstimateResponse", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class RangeEstimateResponse(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SyntheticDataPoint", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class SyntheticDataPoint(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SyntheticDataRequest", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class SyntheticDataRequest(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "SyntheticDataResponse", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class SyntheticDataResponse(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "Telemetry", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class Telemetry(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "TwinListResponse", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class TwinListResponse(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "VehicleSpec", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^class VehicleSpec(BaseModel):$/", "language": "Python", "kind": "class"}, {"_type": "tag", "name": "_lat_check", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    _lat_check = field_validator(\"center_lat\")(_validate_lat)$/", "language": "Python", "kind": "variable", "scope": "CircleRequest", "scopeKind": "class"}, {"_type": "tag", "name": "_lon_check", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    _lon_check = field_validator(\"center_lon\")(_validate_lon)$/", "language": "Python", "kind": "variable", "scope": "CircleRequest", "scopeKind": "class"}, {"_type": "tag", "name": "_validate_lat", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^def _validate_lat(value: float) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "function", "signature": "(value: float)"}, {"_type": "tag", "name": "_validate_lon", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^def _validate_lon(value: float) -> float:$/", "language": "Python", "typeref": "typename:float", "kind": "function", "signature": "(value: float)"}, {"_type": "tag", "name": "battery_kwh", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    battery_kwh: float = Field(..., description=\"Battery capacity in kWh\", gt=0)$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "VehicleSpec", "scopeKind": "class"}, {"_type": "tag", "name": "center_lat", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    center_lat: float = Field(..., description=\"Center latitude\")$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "CircleRequest", "scopeKind": "class"}, {"_type": "tag", "name": "center_lon", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    center_lon: float = Field(..., description=\"Center longitude\")$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "CircleRequest", "scopeKind": "class"}, {"_type": "tag", "name": "coordinates", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    coordinates: conlist(conlist(confloat(), min_length=2, max_length=2), min_length=3, max_leng/", "language": "Python", "typeref": "typename:conlist(conlist(confloat(), min_length=2, max_length=2), min_length=3, max_length=10000)", "kind": "variable", "scope": "PolygonRequest", "scopeKind": "class"}, {"_type": "tag", "name": "created_at", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    created_at: datetime = Field(..., description=\"Creation timestamp\")$/", "language": "Python", "typeref": "typename:datetime", "kind": "variable", "scope": "DigitalTwin", "scopeKind": "class"}, {"_type": "tag", "name": "export_csv", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    export_csv: bool = Field(False, description=\"Export CSV to data\\/exports\")$/", "language": "Python", "typeref": "typename:bool", "kind": "variable", "scope": "SyntheticDataRequest", "scopeKind": "class"}, {"_type": "tag", "name": "export_path", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    export_path: Optional[str] = None$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "SyntheticDataResponse", "scopeKind": "class"}, {"_type": "tag", "name": "id", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    id: str = Field(..., description=\"Twin ID\")$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "DigitalTwin", "scopeKind": "class"}, {"_type": "tag", "name": "make", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    make: str = Field(..., description=\"Vehicle make\")$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "VehicleSpec", "scopeKind": "class"}, {"_type": "tag", "name": "minutes", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    minutes: int = Field(60, description=\"Duration in minutes\", ge=5, le=10080)$/", "language": "Python", "typeref": "typename:int", "kind": "variable", "scope": "SyntheticDataRequest", "scopeKind": "class"}, {"_type": "tag", "name": "model", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    model: str = Field(..., description=\"Vehicle model\")$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "VehicleSpec", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    name: Optional[str] = Field(None, description=\"Twin name\", min_length=1, max_length=200)$/", "language": "Python", "typeref": "typename:Optional[str]", "kind": "variable", "scope": "DigitalTwinUpdate", "scopeKind": "class"}, {"_type": "tag", "name": "name", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    name: str = Field(..., description=\"Twin name\", min_length=1, max_length=200)$/", "language": "Python", "typeref": "typename:str", "kind": "variable", "scope": "DigitalTwinBase", "scopeKind": "class"}, {"_type": "tag", "name": "points", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    points: int = Field(64, description=\"Number of points for polygon\", ge=12, le=512)$/", "language": "Python", "typeref": "typename:int", "kind": "variable", "scope": "CircleRequest", "scopeKind": "class"}, {"_type": "tag", "name": "radius_m", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    radius_m: float = Field(..., description=\"Radius in meters\", gt=0)$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "CircleRequest", "scopeKind": "class"}, {"_type": "tag", "name": "reserve_percent", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    reserve_percent: float = Field(10.0, description=\"Reserve buffer percent\", ge=0, le=50)$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "VehicleSpec", "scopeKind": "class"}, {"_type": "tag", "name": "scenario", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    scenario: Literal[\"urban\", \"highway\", \"mixed\"] = Field(..., description=\"Driving scenario\")$/", "language": "Python", "typeref": "typename:Literal[\"urban\", \"highway\", \"mixed\"]", "kind": "variable", "scope": "SyntheticDataRequest", "scopeKind": "class"}, {"_type": "tag", "name": "seed", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    seed: Optional[int] = Field(None, description=\"Deterministic seed\")$/", "language": "Python", "typeref": "typename:Optional[int]", "kind": "variable", "scope": "SyntheticDataRequest", "scopeKind": "class"}, {"_type": "tag", "name": "soc_percent", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    soc_percent: float = Field(..., description=\"State of charge percent\", ge=0, le=100)$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "Telemetry", "scopeKind": "class"}, {"_type": "tag", "name": "speed_kmh", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    speed_kmh: float = Field(..., description=\"Current speed (km\\/h)\", ge=0, le=300)$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "Telemetry", "scopeKind": "class"}, {"_type": "tag", "name": "temperature_c", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    temperature_c: float = Field(..., description=\"Ambient temperature (C)\", ge=-60, le=60)$/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "Telemetry", "scopeKind": "class"}, {"_type": "tag", "name": "type", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    type: Literal[\"Polygon\"] = \"Polygon\"$/", "language": "Python", "typeref": "typename:Literal[\"Polygon\"]", "kind": "variable", "scope": "PolygonResponse", "scopeKind": "class"}, {"_type": "tag", "name": "updated_at", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    updated_at: datetime = Field(..., description=\"Last update timestamp\")$/", "language": "Python", "typeref": "typename:datetime", "kind": "variable", "scope": "DigitalTwin", "scopeKind": "class"}, {"_type": "tag", "name": "vehicle", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    vehicle: Optional[VehicleSpec] = None$/", "language": "Python", "typeref": "typename:Optional[VehicleSpec]", "kind": "variable", "scope": "DigitalTwinUpdate", "scopeKind": "class"}, {"_type": "tag", "name": "wind_kmh", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    wind_kmh: float = Field(0, description=\"Headwind (+) or tailwind (-) in km\\/h\", ge=-150, le=/", "language": "Python", "typeref": "typename:float", "kind": "variable", "scope": "Telemetry", "scopeKind": "class"}, {"_type": "tag", "name": "year", "path": "/home/kavia/workspace/code-generation/vehicle-range-estimation-and-digital-twin-platform-22-34/vehicle_range_backend/src/domain/schemas.py", "pattern": "/^    year: int = Field(..., description=\"Model year\", ge=1980, le=2100)$/", "language": "Python", "typeref": "typename:int", "kind": "variable", "scope": "VehicleSpec", "scopeKind": "class"}], "hash": "cfd8210330178b099b701bdb227b859e", "format-version": 4, "code-base-name": "vehicle_range_backend", "filename": "vehicle_range_backend/src/domain/schemas.py", "fields": [{"name": "_lat_check = field_validator(\"center_lat\")(_validate_lat)", "scope": "CircleRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "_lon_check = field_validator(\"center_lon\")(_validate_lon)", "scope": "CircleRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "float battery_kwh", "scope": "VehicleSpec", "scopeKind": "class", "description": "unavailable"}, {"name": "float center_lat", "scope": "CircleRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "float center_lon", "scope": "CircleRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "conlist(conlist(confloat(), min_length=2, max_length=2), min_length=3, max_length=10000) coordinates", "scope": "PolygonRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "datetime created_at", "scope": "DigitalTwin", "scopeKind": "class", "description": "unavailable"}, {"name": "bool export_csv", "scope": "SyntheticDataRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] export_path", "scope": "SyntheticDataResponse", "scopeKind": "class", "description": "unavailable"}, {"name": "str id", "scope": "DigitalTwin", "scopeKind": "class", "description": "unavailable"}, {"name": "str make", "scope": "VehicleSpec", "scopeKind": "class", "description": "unavailable"}, {"name": "int minutes", "scope": "SyntheticDataRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "str model", "scope": "VehicleSpec", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[str] name", "scope": "DigitalTwinUpdate", "scopeKind": "class", "description": "unavailable"}, {"name": "str name", "scope": "DigitalTwinBase", "scopeKind": "class", "description": "unavailable"}, {"name": "int points", "scope": "CircleRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "float radius_m", "scope": "CircleRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "float reserve_percent", "scope": "VehicleSpec", "scopeKind": "class", "description": "unavailable"}, {"name": "Literal[\"urban\", \"highway\", \"mixed\"] scenario", "scope": "SyntheticDataRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[int] seed", "scope": "SyntheticDataRequest", "scopeKind": "class", "description": "unavailable"}, {"name": "float soc_percent", "scope": "Telemetry", "scopeKind": "class", "description": "unavailable"}, {"name": "float speed_kmh", "scope": "Telemetry", "scopeKind": "class", "description": "unavailable"}, {"name": "float temperature_c", "scope": "Telemetry", "scopeKind": "class", "description": "unavailable"}, {"name": "Literal[\"Polygon\"] type", "scope": "PolygonResponse", "scopeKind": "class", "description": "unavailable"}, {"name": "datetime updated_at", "scope": "DigitalTwin", "scopeKind": "class", "description": "unavailable"}, {"name": "Optional[VehicleSpec] vehicle", "scope": "DigitalTwinUpdate", "scopeKind": "class", "description": "unavailable"}, {"name": "float wind_kmh", "scope": "Telemetry", "scopeKind": "class", "description": "unavailable"}, {"name": "int year", "scope": "VehicleSpec", "scopeKind": "class", "description": "unavailable"}]}